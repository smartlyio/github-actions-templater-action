name: 'Build GitHub Action Workflows'
description: >-
  Builds workflows from templates in a specified repo. This requires
  the templates cloned before running. It will also delete the
  templates clone after use.

inputs:
  github-token:
    description: Token used to create the PR
    required: true
  templates-location:
    description: >-
      Relative path to the directory where the templates repository
      was cloned.  This directory will be deleted after use; do not
      use it after this action has run.
    required: true
  templater-image-name:
    description: >-
      Name of the docker image to run for the templater action.  It is
      expected that you are logged in to the registry required to pull
      this image.
    required: true
  extra-pr-label:
    description: Label created PRs with this additional label
    required: false
    default: ""
  create-pull-request:
    description: Create a pull request after rendering templates
    default: true
    required: false
  github-repository:
    description: >-
      Full name of the repository that is being rendered. e.g. smartlyio/ci-sla.
      Default is the repository running the workflow
    default: ${{ github.repository }}
    required: false
  local-render:
    description: >-
      Use the templates checkout directly without switching to the branch
      requested by the project (usually master). Default false.
    default: "false"
    required: false
  disable_workflows_prefix:
    description: >-
      Generated workflow files with this filename prefix will have the `on` section
      automatically replaced with an invalid empty `on` list to prevent them from running.
      Ignored if empty
    default: ''
    required: false

outputs:
  has-changes:
    description: Boolean. True if changes were made to the rendered workflows.
    value: ${{ steps.collect-changes.outputs.has-changes }}

runs:
  using: "composite"
  steps:
    - name: Fix default branch discovery for devbox
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_GITHUB_REPOSITORY: ${{ inputs.github-repository }}
      shell: bash
      run: |
        DEFAULT_BRANCH="$(gh api "/repos/${INPUT_GITHUB_REPOSITORY}" | jq -r .default_branch)"
        echo "ref: refs/remotes/origin/${DEFAULT_BRANCH}" > .git/refs/remotes/origin/HEAD

    - name: Run templater
      shell: bash
      env:
        INPUT_GITHUB_REPOSITORY: ${{ inputs.github-repository }}
      run: |
        REPOSITORY_NAME="$(echo "$INPUT_GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")"
        render_arg="--no-update"
        local_render="${{ inputs.local-render }}"
        if [[ "${local_render}" == "true" ]]; then
            render_arg="--local"
        fi
        docker pull "${{ inputs.templater-image-name }}"
        docker run --hostname "workflow-update-${REPOSITORY_NAME}" --rm \
            --mount type=bind,src="$(pwd),dst=/devbox/workspace" \
            --mount type=bind,src="$(pwd)/${{ inputs.templates-location }},dst=/devbox/github-actions-templates" \
            "${{ inputs.templater-image-name }}" \
                render workflows "$render_arg"

    - name: Remove github-actions-templates checkout
      shell: bash
      # Remove templates dir so we don't leave the working tree dirty for
      # commit in next step
      run: |
        rm -rf REMOVE-ME-github-actions-templates
    - name: Disable rendered workflows if required
      if: inputs.disable_workflows_prefix != ''
      env:
        INPUT_DISABLE_WORKFLOWS_PREFIX: ${{ inputs.disable_workflows_prefix }}
      run: |
        mapfile -t WORKFLOWS < <(find .github/workflows -type f -name "${INPUT_DISABLE_WORKFLOWS_PREFIX}*.yml")
        
        for workflow in "${WORKFLOWS[@]}"; do
            echo "Disabling $workflow"
            yq e -i '.on = []' "$workflow"
        done

    - name: Push changes if required
      id: collect-changes
      env:
        INPUT_GITHUB_REPOSITORY: ${{ inputs.github-repository }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_LABEL: ${{ inputs.extra-pr-label }}
        CREATE_PULL_REQUEST: ${{ inputs.create-pull-request }}
      shell: bash
      run: |
        git status
        # Check for changes in .github/workflows
        git_changes="$(git status --porcelain -- .github/workflows || true)"
        # If the output is not empty, there are changes. Commit them
        if [ -n "$git_changes" ]; then
            echo ::set-output name=has-changes::true
            echo "Changes to workflows found!"
        
            if [[ "$CREATE_PULL_REQUEST" == "false" ]]; then
                echo "Skipping pull request creation"
                exit 0
            fi
        
            REPOSITORY_NAME="$(echo "$INPUT_GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")"
            BRANCH_NAME="${REPOSITORY_NAME}-github-actions-self-update"
            echo "Using branch: $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
        
            echo "Adding workflows directory and making commit"
            git add .github/workflows/
            git commit -m "Adding workflow changes at $(date)"
        
            has_changes=true
            echo "Check if there is an existing branch and if the change set already exists in it."
            if [ -z "$(git diff "origin/$BRANCH_NAME" || echo "no branch")" ]; then
              echo "Seems to have no differences from existing branch!"
              has_changes=false
            else
              echo "Pushing the branch"
              git push --force-with-lease -u origin HEAD
            fi
        
            function pr_exists() {
                local repo="$1"
                local branch="$2"
                local PR_COUNT=
                PR_COUNT="$(gh api "repos/${repo}/pulls?state=open&head=smartlyio:${branch}" | jq '. | length')"
                [ "$PR_COUNT" -gt 0 ]
            }
        
            echo "Check if the PR already exists"
            if pr_exists "$INPUT_GITHUB_REPOSITORY" "$BRANCH_NAME"; then
              if [[ "$has_changes" == "true" ]]; then
                echo "PR Exists already!"
                exit 0
              else
                echo "Close the PR as there are no longer relevant changes"
                gh pr close "$BRANCH_NAME"
              fi
            else
              echo "Make sure the labels exist"
              if [ -n "$PR_LABEL" ]; then
                if ! gh api "/repos/smartlyio/${REPOSITORY_NAME}/labels/${PR_LABEL}"; then
                  gh api "/repos/smartlyio/${REPOSITORY_NAME}/labels" -X POST \
                    -f "name=${PR_LABEL}" \
                    -f "description=Do not create a release from this pull request"
                fi
              fi
              if ! gh api "/repos/smartlyio/${REPOSITORY_NAME}/labels/workflow-updater"; then
                gh api "/repos/smartlyio/${REPOSITORY_NAME}/labels" -X POST \
                  -f "name=workflow-updater" \
                  -f "color=ff2994" \
                  -f "description=Automatically generated by workflow updater"
              fi
              echo "Create the PR!"
              gh pr create \
                --title "GitHub Actions Self Update for ${REPOSITORY_NAME}" \
                --body "These changes are generated by the GitHub Actions self updater. Remember to delete the branch!" \
                --reviewer fisherking,sjagoe,mhalmagiu \
                --label "${PR_LABEL:+${PR_LABEL},}workflow-updater"
              exit 0
            fi
        else
            echo ::set-output name=has-changes::false
            echo "No Changes Found."
            exit 0
        fi
